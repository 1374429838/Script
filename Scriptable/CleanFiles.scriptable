{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "brown",
    "glyph" : "trash-alt"
  },
  "name" : "CleanFiles",
  "script" : "\/**\n * Clean files\n *\n * @version 1.0.1\n * @author Honye\n *\/\n\n\/**\n * @param {{[language: string]: string} | string[]} langs\n *\/\nconst i18n = (langs) => {\n  const language = Device.language();\n  if (Array.isArray(langs)) {\n    langs = {\n      en: langs[0],\n      zh: langs[1],\n      others: langs[0]\n    };\n  } else {\n    langs.others = langs.others || langs.en;\n  }\n  return langs[language] || langs.others\n};\n\nconst localFM = FileManager.local();\nconst iCloudFM = FileManager.iCloud();\n\n\/**\n * @param {string} dir\n *\/\nconst presentList = (dir) => {\n  const contents = localFM.listContents(dir);\n  const table = new UITable();\n  for (const item of contents) {\n    const path = localFM.joinPath(dir, item);\n    const isDirectory = localFM.isDirectory(path);\n    const row = new UITableRow();\n    row.cellSpacing = 6;\n    const sfs = SFSymbol.named(isDirectory ? 'folder' : 'doc');\n    const icon = row.addImage(sfs.image);\n    icon.widthWeight = 2;\n    const title = row.addText(item, localFM.modificationDate(path).toLocaleString());\n    title.widthWeight = 18;\n    title.titleFont = Font.headline();\n    title.subtitleFont = Font.footnote();\n    title.subtitleColor = Color.gray();\n    if (isDirectory) {\n      title.titleColor = Color.dynamic(Color.blue(), new Color('#157EFB'));\n    }\n    row.dismissOnSelect = false;\n    row.onSelect = async () => {\n      if (localFM.isDirectory(path)) {\n        presentList(path);\n      } else {\n        if (!localFM.isFileDownloaded(path)) {\n          await localFM.downloadFileFromiCloud(path);\n        }\n        try {\n          const image = localFM.readImage(path);\n          QuickLook.present(image, false);\n          return\n        } catch (e) {\n          console.warn(e);\n        }\n        try {\n          const text = localFM.readString(path);\n          QuickLook.present(text);\n        } catch (e) {\n          console.warn(e);\n        }\n      }\n    };\n    const del = row.addButton(i18n(['Delete', '删除']));\n    del.widthWeight = 4;\n    del.rightAligned();\n    del.onTap = async () => {\n      const alert = new Alert();\n      alert.message = i18n([`Are you sure delete \"${item}\"?`, `确定删除\"${item}\"吗？`]);\n      alert.addAction(i18n(['Delete', '删除']));\n      alert.addCancelAction(i18n(['Cancel', '取消']));\n      const value = await alert.presentAlert();\n      if (value === 0) {\n        localFM.remove(path);\n        table.removeRow(row);\n        table.reload();\n      }\n    };\n    table.addRow(row);\n  }\n  table.present();\n};\n\nconst table = new UITable();\nconst addRow = (title, path) => {\n  const row = new UITableRow();\n  const name = row.addText(title);\n  name.titleFont = Font.headline();\n  name.subtitleFont = Font.footnote();\n  name.subtitleColor = Color.gray();\n  name.titleColor = Color.dynamic(Color.blue(), new Color('#157EFB'));\n  row.dismissOnSelect = false;\n  row.onSelect = () => presentList(path);\n  table.addRow(row);\n};\naddRow('本地缓存', localFM.cacheDirectory());\naddRow('本地文档', localFM.documentsDirectory());\naddRow('本地媒体', localFM.libraryDirectory());\naddRow('临时缓存', localFM.temporaryDirectory());\naddRow('iCloud 文档缓存', iCloudFM.documentsDirectory());\naddRow('iCloud 资料库缓存', iCloudFM.libraryDirectory());\ntable.present();\n",
  "share_sheet_inputs" : [

  ]
}