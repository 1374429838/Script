{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "blue",
    "glyph" : "user-astronaut"
  },
  "name" : "lsp环境",
  "script" : "\/**\n * 公众号：杂货万事屋\n * Author:LSP\n * Date:2021-09-29\n*\/\n\n\/\/ 当前环境版本号\nconst VERSION = 20210929\n\nclass Base {\n    constructor(scriptName) {\n        this.init(scriptName)\n    }\n\n    init(scriptName, widgetFamily = config.widgetFamily) {\n        \/\/ 设置脚本名字\n        this.scriptName = scriptName\n        \/\/ 组件大小：small,medium,large\n        this.widgetFamily = widgetFamily\n        \/\/ 本地存储管理\n        this.fmLocal = FileManager.local()\n        \/\/ 设置默认间距\n        this.paddingSetting()\n        \/\/ 默认开启图片模式\n        this.setSelectPicBg(true)\n        \/\/ 默认关闭纯色模式\n        this.setColorBgMode(false)\n        \/\/ 设置默认刷新时间\n        this.refreshIntervalTime()\n        \/\/ 设置预览尺寸-中等\n        this.setPreViewSizeMode(1)\n    }\n\n    \/**\n    * 预览模式\n    * @param {number} mode 预览尺寸，0：小型，1：中型，2：大型，负数：不进行预览\n    *\/\n    setPreViewSizeMode(mode) {\n        this.previewSizeMode = mode\n    }\n\n    \/**\n    * 设置组件刷新间隔\n    * @param {number}} interval 刷新间隔(单位：分钟)\n    *\/\n    refreshIntervalTime(interval = 10) {\n        this.refreshInterval = interval\n    }\n\n    \/**\n    * 是否是图片背景模式\n    * @param {bool} mode 模式开关\n    *\/\n    setSelectPicBg(mode) {\n        this.picBgMode = mode\n    }\n\n    \/**\n    * 是否是纯色背景模式\n    * @param {bool} mode 模式开关\n    * @param {Color} bgColor 背景颜色\n    *\/\n    setColorBgMode(mode, bgColor = Color.black()) {\n        this.colorBgMode = mode\n        this.bgColor = bgColor\n    }\n\n    \/**\n    * 小组件边距设置\n    * @param {obj} padding 小组件边距\n    *\/\n    paddingSetting(padding = { top: 0, left: 0, bottom: 0, right: 0 }) {\n        this.padding = padding\n    }\n\n    \/\/==========================================\n\n    \/**\n    * 字符串是否包含中文\n    * @param {string} str 文本\n    * @returns 是否包含中文\n    *\/\n    strContainCn(str) {\n        return \/.*[\\u4e00-\\u9fa5]+.*\/.test(str)\n    }\n\n    \/**\n    * 字符串是否全部是中文\n    * @param {string} str 文本\n    * @returns 是否全部是中文\n    *\/\n    strAllCn(str) {\n        return \/^[\\u4e00-\\u9fa5]+$\/.test(str)\n    }\n\n    \/**\n    * 绘制自定义字体文本\n    * @param {string} fontUrl ttf字体url\n    * @param {string} text 文本\n    * @param {number} fontSize 文本字体大小\n    * @param {Color} textColor 文本颜色\n    * @param {string} align 文本对齐\n    * @param {number} lineLimit 行数\n    * @param {number} rowSpacing 行间距\n    * @returns 绘制的文字图片\n    *\/\n    async drawTextWithCustomFont(fontUrl, text, fontSize, textColor, align = \"center\", lineLimit = 1, rowSpacing = 5) {\n        const font = new CustomFont(new WebView(), {\n            fontFamily: 'customFont', \/\/ 字体名称\n            fontUrl: fontUrl, \/\/ 字体地址\n            timeout: 60000, \/\/ 加载字体的超时时间\n        }) \/\/ 创建字体\n        await font.load() \/\/ 加载字体\n        const image = await font.drawText(text, {\n            fontSize: fontSize, \/\/ 字体大小\n            textWidth: 0, \/\/ 文本宽度\n            align: align, \/\/ left、right、center\n            lineLimit: lineLimit, \/\/ 文本行数限制\n            rowSpacing: rowSpacing, \/\/ 文本行间距\n            textColor: textColor, \/\/ 文本颜色\n            scale: 2, \/\/ 缩放因子\n        })\n        return image\n    }\n\n    \/**\n    * base64 编码字符串\n    * @param {string} str 要编码的字符串\n    *\/\n    base64Encode(str) {\n        const data = Data.fromString(str)\n        return data.toBase64String()\n    }\n\n    \/**\n    * base64解码数据 返回字符串\n    * @param {string} b64 base64编码的数据\n    *\/\n    base64Decode(b64) {\n        const data = Data.fromBase64String(b64)\n        return data.toRawString()\n    }\n\n    \/**\n    * Http Get 请求接口\n    * @param {string} url 请求的url\n    * @param {bool} json 返回数据是否为json，默认true\n    * @param {Obj} headers 请求头\n    * @param {string} pointCacheKey 指定缓存key\n    * @param {bool} logable 是否打印数据，默认false\n    * @return {string | json | null}\n    *\/\n    async httpGet(url, json = true, headers, pointCacheKey, logable = false) {\n        console.log(\"\")\n        console.log(`----------------------------------------`)\n\n        \/\/ 根据URL进行md5生成cacheKey\n        let cacheKey = pointCacheKey\n        if (cacheKey == undefined || cacheKey == null || cacheKey.length == 0) {\n            cacheKey = this.md5(url)\n        }\n        \/\/ 读取本地缓存\n        const localCache = this.loadStringCache(cacheKey)\n\n        \/\/ 判断是否需要刷新\n        const lastCacheTime = this.getCacheModificationDate(cacheKey)\n        const timeInterval = Math.floor((this.getCurrentTimeStamp() - lastCacheTime) \/ 60)\n        \/\/ 过时且有本地缓存则直接返回本地缓存数据 \n        console.log(`httpGet缓存判断，上次缓存时间=${timeInterval}分钟前，缓存过期时间=${this.refreshInterval}分钟，cache=${localCache.length}`)\n        if (timeInterval <= this.refreshInterval && localCache != null && localCache.length > 0) {\n            console.log(`httpGet读取缓存数据：==> ${url}`)\n            \/\/ 是否打印响应数据\n            if (logable) {\n                console.log(``)\n                console.log(`httpGet请求响应数据：${localCache}`)\n                console.log(``)\n            }\n            console.log(`----------------------------------------`)\n            return json ? JSON.parse(localCache) : localCache\n        }\n\n        let data = null\n        try {\n            console.log(`httpGet在线请求数据：==> ${url}`)\n            let req = new Request(url)\n            req.method = 'GET'\n            if (headers != null && headers != undefined) {\n                req.headers = headers\n            }\n            data = await (json ? req.loadJSON() : req.loadString())\n        } catch (e) {\n            console.error(`httpGet请求失败：${e}：==> ${url}`)\n        }\n\n        \/\/ 判断数据是否为空（加载失败）\n        if (!data && localCache != null && localCache.length > 0) {\n            console.log(``)\n            console.log(`httpGet读取缓存数据：==> ${url}`)\n            console.log(``)\n            console.log(`----------------------------------------`)\n            return json ? JSON.parse(localCache) : localCache\n        }\n\n        \/\/ 存储缓存\n        this.saveStringCache(cacheKey, json ? JSON.stringify(data) : data)\n\n        \/\/ 是否打印响应数据\n        if (logable) {\n            console.log(``)\n            console.log(`httpGet请求响应数据：${JSON.stringify(data)}`)\n            console.log(``)\n        }\n        console.log(`----------------------------------------`)\n\n        return data\n    }\n\n    \/**\n    * Http POST 请求接口\n    * @param {string} url 请求的url\n    * @param {Array} parameterKV 请求参数键值对数组\n    * @param {bool} json 返回数据是否为json，默认true\n    * @param {Obj} headers 请求头\n    * @param {string} pointCacheKey 指定缓存key\n    * @param {bool} logable 是否打印数据，默认false\n    * @return {string | json | null}\n    *\/\n    async httpPost(url, parameterKV, json = true, headers, pointCacheKey, logable = false) {\n        console.log(\"\")\n        console.log(`----------------------------------------`)\n        \/\/ 根据URL进行md5生成cacheKey\n        let cacheKey = pointCacheKey\n        if (cacheKey == undefined || cacheKey == null || cacheKey.length == 0) {\n            cacheKey = this.md5(url)\n        }\n        \/\/ 读取本地缓存\n        const localCache = this.loadStringCache(cacheKey)\n\n        \/\/ 判断是否需要刷新\n        const lastCacheTime = this.getCacheModificationDate(cacheKey)\n        const timeInterval = Math.floor((this.getCurrentTimeStamp() - lastCacheTime) \/ 60)\n        \/\/ 过时且有本地缓存则直接返回本地缓存数据\n        console.log(`httpPost缓存判断，上次缓存时间=${timeInterval}分钟前，缓存过期时间=${this.refreshInterval}分钟，cache=${localCache.length}`)\n        if (timeInterval <= this.refreshInterval && localCache != null && localCache.length > 0) {\n            console.log(`httpPost读取缓存数据：==> ${url}`)\n            \/\/ 是否打印响应数据\n            if (logable) {\n                console.log(``)\n                console.log(`httpPost请求响应数据：${localCache}`)\n                console.log(``)\n            }\n            console.log(`----------------------------------------`)\n            return json ? JSON.parse(localCache) : localCache\n        }\n\n        let data = null\n        try {\n            console.log(`httpPost在线请求数据：==> ${url}`)\n            let req = new Request(url)\n            req.method = 'POST'\n            if (headers != null && headers != undefined) {\n                req.headers = headers\n            }\n            for (const parameter of parameterKV) {\n                req.addParameterToMultipart(Object.keys(parameter)[0], Object.values(parameter)[0])\n            }\n            data = await (json ? req.loadJSON() : req.loadString())\n        } catch (e) {\n            console.error(`httpPost请求失败：${e}：==> ${url}`)\n        }\n\n        \/\/ 判断数据是否为空（加载失败）\n        if (!data && localCache != null && localCache.length > 0) {\n            console.log(``)\n            console.log(`httpPost读取缓存数据：==> ${url}`)\n            console.log(``)\n            console.log(`----------------------------------------`)\n            return json ? JSON.parse(localCache) : localCache\n        }\n\n        \/\/ 存储缓存\n        this.saveStringCache(cacheKey, json ? JSON.stringify(data) : data)\n\n        \/\/ 是否打印响应数据\n        if (logable) {\n            console.log(``)\n            console.log(`httpPost请求响应数据：${JSON.stringify(data)}`)\n            console.log(``)\n        }\n        console.log(`----------------------------------------`)\n\n        return data\n    }\n\n    \/**\n    * 获取手机定位信息\n    * @param {string} locale 地区\n    * @return 定位信息\n    *\/\n    async getLocation(locale = \"zh_cn\") {\n        console.log(\"\")\n\n        console.log(`----------------------------------------`)\n        console.log(`开始定位`)\n        \/\/ 定位信息\n        let locationData = {\n            \"latitude\": undefined,\n            \"longitude\": undefined,\n            \"locality\": undefined,\n            \"subLocality\": undefined\n        }\n\n        \/\/ 缓存key\n        const cacheKey = \"lsp-location-cache\"\n\n        \/\/ 判断是否需要刷新\n        const lastCacheTime = this.getCacheModificationDate(cacheKey)\n        const timeInterval = Math.floor((this.getCurrentTimeStamp() - lastCacheTime) \/ 60)\n        \/\/ 缓存数据\n        const locationCache = this.loadStringCache(cacheKey)\n        console.log(`定位缓存判断，上次缓存时间=${timeInterval}分钟前，缓存过期时间=${this.refreshInterval}分钟，cache=${locationCache.length}`)\n\n        if (timeInterval <= this.refreshInterval && locationCache != null && locationCache.length > 0) {\n            \/\/ 读取缓存数据\n            console.log(`读取定位缓存数据：${locationCache}`)\n            locationData = JSON.parse(locationCache)\n        } else {\n            try {\n                const location = await Location.current()\n                const geocode = await Location.reverseGeocode(location.latitude, location.longitude, locale)\n                locationData.latitude = location.latitude\n                locationData.longitude = location.longitude\n                const geo = geocode[0]\n                \/\/ 市\n                if (locationData.locality == undefined) {\n                    locationData.locality = geo.locality\n                }\n                \/\/ 区\n                if (locationData.subLocality == undefined) {\n                    locationData.subLocality = geo.subLocality\n                }\n                \/\/ 街道\n                locationData.street = geo.thoroughfare\n\n                \/\/ 缓存数据\n                this.saveStringCache(cacheKey, JSON.stringify(locationData))\n\n                console.log(`定位信息：latitude=${location.latitude}，longitude=${location.longitude}，locality=${locationData.locality}，subLocality=${locationData.subLocality}，street=${locationData.street}`)\n            } catch (e) {\n                console.log(`定位出错了，${e.toString()}`)\n                \/\/ 读取缓存数据\n                const locationCache = this.loadStringCache(cacheKey)\n                console.log(`读取定位缓存数据：${locationCache}`)\n                locationData = JSON.parse(locationCache)\n            }\n        }\n\n        console.log(`----------------------------------------`)\n        return locationData\n    }\n\n    \/**\n    * 绘制图片阴影浮层\n    * @param {Image} img 图片\n    * @param {Color} shadowColor 阴影颜色\n    * @return {Image}\n    *\/\n    async loadShadowColor2Image(img, shadowColor) {\n        let drawContext = new DrawContext()\n        drawContext.size = img.size\n        \/\/ 把图片画上去\n        drawContext.drawImageInRect(img, new Rect(0, 0, img.size['width'], img.size['height']))\n        \/\/ 填充蒙版颜色\n        drawContext.setFillColor(shadowColor)\n        \/\/ 填充\n        drawContext.fillRect(new Rect(0, 0, img.size['width'], img.size['height']))\n        return await drawContext.getImage()\n    }\n\n    \/**\n    * 获取图片\n    * @param {string} url 图片链接\n    * @param {string} pointCacheKey 指定缓存key\n    * @param {bool} useCache 是否使用缓存\n    * @return {Image}\n    *\/\n    async getImageByUrl(url, pointCacheKey = null, useCache = true) {\n        console.log('')\n        console.log(`----------------------------------------`)\n\n        \/\/ 根据URL进行md5生成cacheKey\n        let cacheKey = pointCacheKey\n        let isPointCacheKey = true\n        if (cacheKey == undefined || cacheKey == null || cacheKey.length == 0) {\n            isPointCacheKey = false\n            cacheKey = this.md5(url)\n        }\n\n\n        \/\/ 缓存数据\n        if (useCache) {\n            const cacheImg = this.loadImgCache(cacheKey)\n            if (cacheImg != undefined && cacheImg != null) {\n                console.log(`图片是否指定了缓存key：${isPointCacheKey}`)\n                if (isPointCacheKey) {\n                    \/\/ 判断是否需要刷新\n                    const lastCacheTime = this.getCacheModificationDate(cacheKey)\n                    const timeInterval = Math.floor((this.getCurrentTimeStamp() - lastCacheTime) \/ 60)\n                    console.log(`图片缓存判断，上次缓存时间=${timeInterval}分钟前，缓存过期时间=${this.refreshInterval}分钟`)\n                    \/\/ 是否使用缓存\n                    if (timeInterval <= this.refreshInterval) {\n                        console.log(`使用缓存图片：${url}`)\n                        console.log(`----------------------------------------`)\n                        return cacheImg\n                    }\n                } else {\n                    console.log(`使用缓存图片：${url}`)\n                    console.log(`----------------------------------------`)\n                    return cacheImg\n                }\n\n            }\n        }\n\n\n        \/\/ 在线\n        try {\n            console.log(`在线请求图片：${url}`)\n            console.log(`----------------------------------------`)\n            const req = new Request(url)\n            const img = await req.loadImage()\n            \/\/ 存储到缓存\n            this.saveImgCache(cacheKey, img)\n            return img\n        } catch (e) {\n            console.error(`图片加载失败：${e}`)\n            \/\/ 判断本地是否有缓存，有的话直接返回缓存\n            let cacheImg = this.loadImgCache(cacheKey)\n            if (cacheImg != undefined) {\n                console.log(`使用缓存图片：${url}`)\n                console.log(`----------------------------------------`)\n                return cacheImg\n            }\n            \/\/ 没有缓存+失败情况下，返回灰色背景\n            console.log(`返回默认图片：${url}`)\n            console.log(`----------------------------------------`)\n            let ctx = new DrawContext()\n            ctx.size = new Size(80, 80)\n            ctx.setFillColor(Color.darkGray())\n            ctx.fillRect(new Rect(0, 0, 80, 80))\n            return await ctx.getImage()\n        }\n    }\n\n    \/**\n    * 保存字符串到本地\n    * @param {string} cacheKey 缓存key\n    * @param {string} content 缓存内容\n    *\/\n    saveStringCache(cacheKey, content) {\n        const cacheFile = this.fmLocal.joinPath(FileManager.local().documentsDirectory(), cacheKey)\n        this.fmLocal.writeString(cacheFile, content)\n    }\n\n    \/**\n    * 获取本地缓存字符串\n    * @param {string} cacheKey 缓存key\n    * @return {string} 本地字符串缓存\n    *\/\n    loadStringCache(cacheKey) {\n        const cacheFile = this.fmLocal.joinPath(FileManager.local().documentsDirectory(), cacheKey)\n        const fileExists = this.fmLocal.fileExists(cacheFile)\n        let cacheString = \"\"\n        if (fileExists) {\n            cacheString = this.fmLocal.readString(cacheFile)\n        }\n        return cacheString\n    }\n\n    \/**\n    * 保存图片到本地\n    * @param {string} cacheKey 缓存key\n    * @param {Image} img 缓存图片\n    *\/\n    saveImgCache(cacheKey, img) {\n        const cacheFile = this.fmLocal.joinPath(FileManager.local().documentsDirectory(), cacheKey)\n        this.fmLocal.writeImage(cacheFile, img)\n    }\n\n    \/**\n    * 获取本地缓存图片\n    * @param {string} cacheKey 缓存key\n    * @return {Image} 本地图片缓存\n    *\/\n    loadImgCache(cacheKey) {\n        const cacheFile = this.fmLocal.joinPath(FileManager.local().documentsDirectory(), cacheKey)\n        const fileExists = this.fmLocal.fileExists(cacheFile)\n        let img = undefined\n        if (fileExists) {\n            img = this.fmLocal.readImage(cacheFile)\n        }\n        return img\n    }\n\n    \/**\n    * 获取缓存文件的上次修改时间\n    * @param {string} cacheKey 缓存key\n    * @return 返回上次缓存文件修改的时间戳(单位：秒)\n    *\/\n    getCacheModificationDate(cacheKey) {\n        const cacheFile = this.fmLocal.joinPath(FileManager.local().documentsDirectory(), cacheKey)\n        const fileExists = this.fmLocal.fileExists(cacheFile)\n        if (fileExists) {\n            return this.fmLocal.modificationDate(cacheFile).getTime() \/ 1000\n        } else {\n            return 0\n        }\n    }\n\n    \/**\n    * 获取当前时间戳(单位：秒)\n    *\/\n    getCurrentTimeStamp() {\n        return new Date().getTime() \/ 1000\n    }\n\n    \/**\n    * 删除本地缓存\n    * @param {string} cacheKey 缓存key\n    *\/\n    removeCache(cacheKey) {\n        const cacheFile = this.fmLocal.joinPath(FileManager.local().documentsDirectory(), cacheKey)\n        this.fmLocal.remove(cacheFile)\n    }\n\n    \/**\n    * 删除本地缓存集合\n    * @param {string} cacheKey 缓存key\n    *\/\n    removeCaches(cacheKeyList) {\n        for (const cacheKey of cacheKeyList) {\n            removeCache(cacheKey)\n        }\n    }\n\n    \/**\n    * 索引值轮播\n    * @param {string} cacheKey 缓存key\n    * @param {number} size 轮播大小\n    *\/\n    carouselIndex(cacheKey, size) {\n        let index = -1\n        if (Keychain.contains(cacheKey)) {\n            let cacheString = Keychain.get(cacheKey)\n            index = parseInt(cacheString)\n            console.log(`索引缓存值---${index}`);\n        }\n\n        index = index + 1\n        index = index % size\n        console.log(`索引值轮播---${index}`);\n        Keychain.set(cacheKey, `${index}`)\n        return index\n    }\n\n    \/**\n    * 格式化时间\n    * @param {Date} date 日期\n    * @param {DateFormatter} formatter 格式化\n    * @param {string} locale 地区\n    *\/\n    getDateStr(date, formatter = \"yyyy年MM月d日 EEE\", locale = \"zh_cn\") {\n        const df = new DateFormatter()\n        df.locale = locale\n        df.dateFormat = formatter\n        return df.string(date)\n    }\n\n    \/**\n    * 获取组件尺寸宽度大小\n    * @param {string} size 组件尺寸【小号】、【中号】、【大号】\n    * @param {bool} isIphone12Mini 是否是12mini\n    *\/\n    getWidgetWidthSize(size, isIphone12Mini) {\n        \/\/ 屏幕缩放比例\n        const screenScale = Device.screenScale()\n        \/\/ 组件宽度\n        let phoneWidgetSize = undefined\n        \/\/ 手机屏幕高度\n        const screenHeight = Device.screenSize().height * screenScale\n        if (screenHeight == 2436) {\n            \/\/ 2436尺寸的手机有【11 Pro, XS, X】 & 【12 mini】\n            if (isIphone12Mini) {\n                phoneWidgetSize = this.phoneSizes()[screenHeight].mini\n            } else {\n                phoneWidgetSize = this.phoneSizes()[screenHeight].x\n            }\n        } else {\n            phoneWidgetSize = this.phoneSizes()[screenHeight]\n        }\n        const width = phoneWidgetSize[size] \/ screenScale\n        return width\n    }\n\n    \/**\n    * 获取上次保存的背景图\n    * @return 背景图\n    *\/\n    loadLastSavedBgImg() {\n        return this.loadImgCache(this.scriptName)\n    }\n\n    \/**\n    * 画图\n    * @param {DrawContext} drawContext 画板\n    * @param {Image} image 图片\n    * @param {number} x 坐标x\n    * @param {number} y 坐标y\n    *\/\n    drawImage(drawContext, image, x, y) {\n        drawContext.drawImageAtPoint(image, new Point(x, y))\n    }\n\n    \/**\n    * 画文本\n    * @param {DrawContext} drawContext 画板\n    * @param {string} text 文本\n    * @param {Font} fontSize 字体\n    * @param {number} x 坐标x\n    * @param {number} y 坐标y\n    * @param {Color} color 颜色\n    *\/\n    drawText(drawContext, text, fontSize, x, y, color = Color.white()) {\n        drawContext.setFont(Font.boldSystemFont(fontSize))\n        drawContext.setTextColor(color)\n        drawContext.drawText(new String(text).toString(), new Point(x, y))\n    }\n\n    \/**\n    * 画线\n    * @param {DrawContext} drawContext 画板\n    * @param {number} x1 坐标\n    * @param {number} y1 坐标\n    * @param {number} x2 坐标\n    * @param {number} y2 坐标\n    * @param {*} width 线宽\n    * @param {*} color 颜色\n    *\/\n    drawLine(drawContext, x1, y1, x2, y2, width = 2, color = Color.white()) {\n        const path = new Path()\n        path.move(new Point(x1, y1))\n        path.addLine(new Point(x2, y2))\n        drawContext.addPath(path)\n        drawContext.setStrokeColor(color)\n        drawContext.setLineWidth(width)\n        drawContext.strokePath()\n    }\n\n    \/**\n    * 获取SFSymbol\n    * @param {string}} name 名\n    * @param {number} size 尺寸\n    *\/\n    getSFSymbol(name, size) {\n        const sf = SFSymbol.named(name)\n        if (sf != null) {\n            if (size != undefined && size != null) {\n                sf.applyFont(Font.systemFont(size))\n            }\n            return sf.image\n        } else {\n            return undefined\n        }\n    }\n\n    \/**\n    * 获取widget输入\n    * @param {string} defaultInput 默认输入\n    *\/\n    getWidgetInput(defaultInput = \"\") {\n        \/\/ 获取外部输入的参数\n        let widgetInputRAW = args.widgetParameter\n        try {\n            widgetInputRAW.toString()\n        } catch (e) {\n            widgetInputRAW = defaultInput\n        }\n        return widgetInputRAW.toString()\n    }\n\n    \/**\n    * 获取数组的随机索引\n    * @param {Array} arr 数组\n    *\/\n    getRandowArrValue(arr) {\n        \/\/ 索引\n        const key = parseInt(Math.random() * arr.length)\n        let item = arr[key]\n        if (item == undefined) {\n            item = arr[0]\n        }\n        return item\n    }\n\n    \/**\n    * md5 加密字符串\n    * @param {string} str 要加密成md5的数据\n    *\/\n    md5(str) {\n        function d(n, t) {\n            var r = (65535 & n) + (65535 & t);\n            return (((n >> 16) + (t >> 16) + (r >> 16)) << 16) | (65535 & r);\n        }\n\n        function f(n, t, r, e, o, u) {\n            return d(((c = d(d(t, n), d(e, u))) << (f = o)) | (c >>> (32 - f)), r);\n            var c, f;\n        }\n\n        function l(n, t, r, e, o, u, c) {\n            return f((t & r) | (~t & e), n, t, o, u, c);\n        }\n\n        function v(n, t, r, e, o, u, c) {\n            return f((t & e) | (r & ~e), n, t, o, u, c);\n        }\n\n        function g(n, t, r, e, o, u, c) {\n            return f(t ^ r ^ e, n, t, o, u, c);\n        }\n\n        function m(n, t, r, e, o, u, c) {\n            return f(r ^ (t | ~e), n, t, o, u, c);\n        }\n\n        function i(n, t) {\n            var r, e, o, u;\n            (n[t >> 5] |= 128 << t % 32), (n[14 + (((t + 64) >>> 9) << 4)] = t);\n            for (\n                var c = 1732584193,\n                f = -271733879,\n                i = -1732584194,\n                a = 271733878,\n                h = 0;\n                h < n.length;\n                h += 16\n            )\n                (c = l((r = c), (e = f), (o = i), (u = a), n[h], 7, -680876936)),\n                    (a = l(a, c, f, i, n[h + 1], 12, -389564586)),\n                    (i = l(i, a, c, f, n[h + 2], 17, 606105819)),\n                    (f = l(f, i, a, c, n[h + 3], 22, -1044525330)),\n                    (c = l(c, f, i, a, n[h + 4], 7, -176418897)),\n                    (a = l(a, c, f, i, n[h + 5], 12, 1200080426)),\n                    (i = l(i, a, c, f, n[h + 6], 17, -1473231341)),\n                    (f = l(f, i, a, c, n[h + 7], 22, -45705983)),\n                    (c = l(c, f, i, a, n[h + 8], 7, 1770035416)),\n                    (a = l(a, c, f, i, n[h + 9], 12, -1958414417)),\n                    (i = l(i, a, c, f, n[h + 10], 17, -42063)),\n                    (f = l(f, i, a, c, n[h + 11], 22, -1990404162)),\n                    (c = l(c, f, i, a, n[h + 12], 7, 1804603682)),\n                    (a = l(a, c, f, i, n[h + 13], 12, -40341101)),\n                    (i = l(i, a, c, f, n[h + 14], 17, -1502002290)),\n                    (c = v(\n                        c,\n                        (f = l(f, i, a, c, n[h + 15], 22, 1236535329)),\n                        i,\n                        a,\n                        n[h + 1],\n                        5,\n                        -165796510,\n                    )),\n                    (a = v(a, c, f, i, n[h + 6], 9, -1069501632)),\n                    (i = v(i, a, c, f, n[h + 11], 14, 643717713)),\n                    (f = v(f, i, a, c, n[h], 20, -373897302)),\n                    (c = v(c, f, i, a, n[h + 5], 5, -701558691)),\n                    (a = v(a, c, f, i, n[h + 10], 9, 38016083)),\n                    (i = v(i, a, c, f, n[h + 15], 14, -660478335)),\n                    (f = v(f, i, a, c, n[h + 4], 20, -405537848)),\n                    (c = v(c, f, i, a, n[h + 9], 5, 568446438)),\n                    (a = v(a, c, f, i, n[h + 14], 9, -1019803690)),\n                    (i = v(i, a, c, f, n[h + 3], 14, -187363961)),\n                    (f = v(f, i, a, c, n[h + 8], 20, 1163531501)),\n                    (c = v(c, f, i, a, n[h + 13], 5, -1444681467)),\n                    (a = v(a, c, f, i, n[h + 2], 9, -51403784)),\n                    (i = v(i, a, c, f, n[h + 7], 14, 1735328473)),\n                    (c = g(\n                        c,\n                        (f = v(f, i, a, c, n[h + 12], 20, -1926607734)),\n                        i,\n                        a,\n                        n[h + 5],\n                        4,\n                        -378558,\n                    )),\n                    (a = g(a, c, f, i, n[h + 8], 11, -2022574463)),\n                    (i = g(i, a, c, f, n[h + 11], 16, 1839030562)),\n                    (f = g(f, i, a, c, n[h + 14], 23, -35309556)),\n                    (c = g(c, f, i, a, n[h + 1], 4, -1530992060)),\n                    (a = g(a, c, f, i, n[h + 4], 11, 1272893353)),\n                    (i = g(i, a, c, f, n[h + 7], 16, -155497632)),\n                    (f = g(f, i, a, c, n[h + 10], 23, -1094730640)),\n                    (c = g(c, f, i, a, n[h + 13], 4, 681279174)),\n                    (a = g(a, c, f, i, n[h], 11, -358537222)),\n                    (i = g(i, a, c, f, n[h + 3], 16, -722521979)),\n                    (f = g(f, i, a, c, n[h + 6], 23, 76029189)),\n                    (c = g(c, f, i, a, n[h + 9], 4, -640364487)),\n                    (a = g(a, c, f, i, n[h + 12], 11, -421815835)),\n                    (i = g(i, a, c, f, n[h + 15], 16, 530742520)),\n                    (c = m(\n                        c,\n                        (f = g(f, i, a, c, n[h + 2], 23, -995338651)),\n                        i,\n                        a,\n                        n[h],\n                        6,\n                        -198630844,\n                    )),\n                    (a = m(a, c, f, i, n[h + 7], 10, 1126891415)),\n                    (i = m(i, a, c, f, n[h + 14], 15, -1416354905)),\n                    (f = m(f, i, a, c, n[h + 5], 21, -57434055)),\n                    (c = m(c, f, i, a, n[h + 12], 6, 1700485571)),\n                    (a = m(a, c, f, i, n[h + 3], 10, -1894986606)),\n                    (i = m(i, a, c, f, n[h + 10], 15, -1051523)),\n                    (f = m(f, i, a, c, n[h + 1], 21, -2054922799)),\n                    (c = m(c, f, i, a, n[h + 8], 6, 1873313359)),\n                    (a = m(a, c, f, i, n[h + 15], 10, -30611744)),\n                    (i = m(i, a, c, f, n[h + 6], 15, -1560198380)),\n                    (f = m(f, i, a, c, n[h + 13], 21, 1309151649)),\n                    (c = m(c, f, i, a, n[h + 4], 6, -145523070)),\n                    (a = m(a, c, f, i, n[h + 11], 10, -1120210379)),\n                    (i = m(i, a, c, f, n[h + 2], 15, 718787259)),\n                    (f = m(f, i, a, c, n[h + 9], 21, -343485551)),\n                    (c = d(c, r)),\n                    (f = d(f, e)),\n                    (i = d(i, o)),\n                    (a = d(a, u));\n            return [c, f, i, a];\n        }\n\n        function a(n) {\n            for (var t = '', r = 32 * n.length, e = 0; e < r; e += 8)\n                t += String.fromCharCode((n[e >> 5] >>> e % 32) & 255);\n            return t;\n        }\n\n        function h(n) {\n            var t = [];\n            for (t[(n.length >> 2) - 1] = void 0, e = 0; e < t.length; e += 1)\n                t[e] = 0;\n            for (var r = 8 * n.length, e = 0; e < r; e += 8)\n                t[e >> 5] |= (255 & n.charCodeAt(e \/ 8)) << e % 32;\n            return t;\n        }\n\n        function e(n) {\n            for (var t, r = '0123456789abcdef', e = '', o = 0; o < n.length; o += 1)\n                (t = n.charCodeAt(o)),\n                    (e += r.charAt((t >>> 4) & 15) + r.charAt(15 & t));\n            return e;\n        }\n\n        function r(n) {\n            return unescape(encodeURIComponent(n));\n        }\n\n        function o(n) {\n            return a(i(h((t = r(n))), 8 * t.length));\n            var t;\n        }\n\n        function u(n, t) {\n            return (function (n, t) {\n                var r,\n                    e,\n                    o = h(n),\n                    u = [],\n                    c = [];\n                for (\n                    u[15] = c[15] = void 0,\n                    16 < o.length && (o = i(o, 8 * n.length)),\n                    r = 0;\n                    r < 16;\n                    r += 1\n                )\n                    (u[r] = 909522486 ^ o[r]), (c[r] = 1549556828 ^ o[r]);\n                return (\n                    (e = i(u.concat(h(t)), 512 + 8 * t.length)), a(i(c.concat(e), 640))\n                );\n            })(r(n), r(t));\n        }\n\n        function t(n, t, r) {\n            return t ? (r ? u(t, n) : e(u(t, n))) : r ? o(n) : e(o(n));\n        }\n\n        return t(str);\n    }\n\n    \/**\n    * ------------------------------------------------------------------------------\n    *\/\n\n    \/**\n    * 透明背景\n    * created by Max Zeryck @mzeryck\n    *\/\n    async transparentBg() {\n        if (config.runsInApp) {\n            let imgCrop = undefined\n            const tips = \"您的小部件背景已准备就绪，退到桌面刷新小组件查看即可\"\n            \/\/ Determine if user has taken the screenshot.\n            var message\n            message = \"如需实现透明背景请先滑到最右边的空白页并截图\"\n            let options = [\"继续选择图片\", \"退出进行截图\", \"同步远程环境\"]\n            let response = await this.generateAlert(message, options)\n            \/\/ Return if we need to exit.\n            if (response == 1) return null\n\n            \/\/ Update the code.\n            if (response == 2) {\n                \/\/ Determine if the user is using iCloud.\n                let files = FileManager.local()\n                const iCloudInUse = files.isFileStoredIniCloud(module.filename)\n                \/\/ If so, use an iCloud file manager.\n                files = iCloudInUse ? FileManager.iCloud() : files\n                \/\/ Try to download the file.\n                try {\n                    const req = new Request(\"https:\/\/gitee.com\/enjoyee\/scriptable\/raw\/master\/%E6%96%B0%E7%B3%BB%E5%88%97\/lsp%E7%8E%AF%E5%A2%83.js\")\n                    const codeString = await req.loadString()\n                    files.writeString(module.filename, codeString)\n                    message = \"环境脚本已更新，下次运行时生效。\"\n                } catch {\n                    message = \"更新失败，请稍后再试。\"\n                }\n                options = [\"好的\"]\n                await this.generateAlert(message, options)\n                return\n            }\n\n            \/\/ Get screenshot and determine phone size.\n            let img = await Photos.fromLibrary()\n            let height = img.size.height\n            let phone = this.phoneSizes()[height]\n            if (!phone) {\n                message = \"您似乎选择了非iPhone屏幕截图的图像，或者不支持您的iPhone。请使用其他图像再试一次!\"\n                await this.generateAlert(message, [\"好的\"])\n                return\n            }\n\n            \/\/ Extra setup needed for 2436-sized phones.\n            if (height == 2436) {\n                let files = FileManager.local()\n                let cacheName = \"lsp-phone-type\"\n                let cachePath = files.joinPath(files.libraryDirectory(), cacheName)\n\n                \/\/ If we already cached the phone size, load it.\n                if (files.fileExists(cachePath)) {\n                    let typeString = files.readString(cachePath)\n                    phone = phone[typeString]\n\n                    \/\/ Otherwise, prompt the user.\n                } else {\n                    message = \"你使用什么型号的iPhone？\"\n                    let types = [\"iPhone 12 mini\", \"iPhone 11 Pro, XS, or X\"]\n                    let typeIndex = await this.generateAlert(message, types)\n                    let type = (typeIndex == 0) ? \"mini\" : \"x\"\n                    phone = phone[type]\n                    files.writeString(cachePath, type)\n                }\n            }\n\n            \/\/ Prompt for widget size and position.\n            message = \"您想要创建什么尺寸的小部件？\"\n            let sizes = [\"小号\", \"中号\", \"大号\"]\n            let size = await this.generateAlert(message, sizes)\n            let widgetSize = sizes[size]\n\n            message = \"您想它应用在什么位置？\"\n            message += (height == 1136 ? \" (请注意，您的设备仅支持两行小部件，因此中间和底部选项相同。)\" : \"\")\n\n            \/\/ Determine image crop based on phone size.\n            let crop = { w: \"\", h: \"\", x: \"\", y: \"\" }\n            if (widgetSize == \"小号\") {\n                crop.w = phone.小号\n                crop.h = phone.小号\n                let positions = [\"顶部 左边\", \"顶部 右边\", \"中间 左边\", \"中间 右边\", \"底部 左边\", \"底部 右边\"]\n                let position = await this.generateAlert(message, positions)\n\n                \/\/ Convert the two words into two keys for the phone size dictionary.\n                let keys = positions[position].toLowerCase().split(' ')\n                crop.y = phone[keys[0]]\n                crop.x = phone[keys[1]]\n\n            } else if (widgetSize == \"中号\") {\n                crop.w = phone.中号\n                crop.h = phone.小号\n\n                \/\/ 中号 and 大号 widgets have a fixed x-value.\n                crop.x = phone.左边\n                let positions = [\"顶部\", \"中间\", \"底部\"]\n                let position = await this.generateAlert(message, positions)\n                let key = positions[position].toLowerCase()\n                crop.y = phone[key]\n\n            } else if (widgetSize == \"大号\") {\n                crop.w = phone.中号\n                crop.h = phone.大号\n                crop.x = phone.左边\n                let positions = [\"顶部\", \"底部\"]\n                let position = await this.generateAlert(message, positions)\n\n                \/\/ 大号 widgets at the 底部 have the \"中间\" y-value.\n                crop.y = position ? phone.中间 : phone.顶部\n            }\n\n            \/\/ Prompt for blur style.\n            message = \"您想要一个完全透明的小部件，还是半透明的模糊效果？\"\n            let blurOptions = [\"透明背景\", \"浅色模糊\", \"深色模糊\", \"完全模糊\"]\n            let blurred = await this.generateAlert(message, blurOptions)\n\n            \/\/ We always need the cropped image.\n            imgCrop = this.cropImage(crop, img)\n\n            \/\/ If it's blurred, set the blur style.\n            if (blurred) {\n                const styles = [\"\", \"light\", \"dark\", \"none\"]\n                const style = styles[blurred]\n                imgCrop = await this.blurImage(img, crop, style)\n            }\n\n            message = tips\n            const exportPhotoOptions = [\"完成预览\", \"导出到相册\"]\n            const exportToPhoto = await this.generateAlert(message, exportPhotoOptions)\n\n            if (exportToPhoto) {\n                Photos.save(imgCrop)\n            }\n\n            \/\/ 保存\n            this.saveImgCache(this.scriptName, imgCrop)\n        }\n    }\n\n    \/**\n    * 弹窗\n    * @param {string} message 信息\n    * @param {Array} options 选项\n    *\/\n    async generateAlert(message, options) {\n        let alert = new Alert()\n        alert.message = message\n\n        for (const option of options) {\n            alert.addAction(option)\n        }\n\n        let response = await alert.presentAlert()\n        return response\n    }\n\n    \/**\n    * 裁剪图片\n    * @param {Rect} crop 裁剪矩形\n    * @param {Image} image 图片\n    *\/\n    cropImage(crop, image) {\n        let draw = new DrawContext()\n        let rect = new Rect(crop.x, crop.y, crop.w, crop.h)\n        draw.size = new Size(rect.width, rect.height)\n\n        draw.drawImageAtPoint(image, new Point(-rect.x, -rect.y))\n        return draw.getImage()\n    }\n\n    \/**\n    * 高斯模糊\n    * @param {Image} img 图片\n    * @param {Rect} crop 裁剪的矩形\n    * @param {string} style 高斯模糊样式：dark、light\n    * @param {number} blur 高斯模糊强度\n    *\/\n    async blurImage(img, crop, style, blur = 150) {\n        const js = `\n            \/*\n            StackBlur - a fast almost Gaussian Blur For Canvas\n            Version:   0.5\n            Author:    Mario Klingemann\n            Contact:   mario@quasimondo.com\n            Website:  http:\/\/quasimondo.com\/StackBlurForCanvas\/StackBlurDemo.html\n            Twitter:  @quasimondo\n            In case you find this class useful - especially in commercial projects -\n            I am not totally unhappy for a small donation to my PayPal account\n            mario@quasimondo.de\n            Or support me on flattr: \n            https:\/\/flattr.com\/thing\/72791\/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript\n            Copyright (c) 2010 Mario Klingemann\n            Permission is hereby granted, free of charge, to any person\n            obtaining a copy of this software and associated documentation\n            files (the \"Software\"), to deal in the Software without\n            restriction, including without limitation the rights to use,\n            copy, modify, merge, publish, distribute, sublicense, and\/or sell\n            copies of the Software, and to permit persons to whom the\n            Software is furnished to do so, subject to the following\n            conditions:\n            The above copyright notice and this permission notice shall be\n            included in all copies or substantial portions of the Software.\n            THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n            EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n            OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n            NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n            HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n            WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n            FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n            OTHER DEALINGS IN THE SOFTWARE.\n        *\/\n        var mul_table = [\n            512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512,\n            454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512,\n            482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456,\n            437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512,\n            497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328,\n            320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456,\n            446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335,\n            329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512,\n            505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405,\n            399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328,\n            324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271,\n            268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456,\n            451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388,\n            385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335,\n            332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292,\n            289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];\n        \n        \n        var shg_table = [\n            9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n            17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,\n            19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n            20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,\n            21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n            21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n            22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n            22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,\n            23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n            23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n            23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n            23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n            24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n            24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n            24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n            24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];\n        function stackBlurCanvasRGB(id, top_x, top_y, width, height, radius) {\n            if (isNaN(radius) || radius < 1) return;\n            radius |= 0;\n        \n            var canvas = document.getElementById(id);\n            var context = canvas.getContext(\"2d\");\n            var imageData;\n        \n            try {\n                try {\n                    imageData = context.getImageData(top_x, top_y, width, height);\n                } catch (e) {\n        \n                    \/\/ NOTE: this part is supposedly only needed if you want to work with local files\n                    \/\/ so it might be okay to remove the whole try\/catch block and just use\n                    \/\/ imageData = context.getImageData( top_x, top_y, width, height );\n                    try {\n                        netscape.security.PrivilegeManager.enablePrivilege(\"UniversalBrowserRead\");\n                        imageData = context.getImageData(top_x, top_y, width, height);\n                    } catch (e) {\n                        alert(\"Cannot access local image\");\n                        throw new Error(\"unable to access local image data: \" + e);\n                        return;\n                    }\n                }\n            } catch (e) {\n                alert(\"Cannot access image\");\n                throw new Error(\"unable to access image data: \" + e);\n            }\n        \n            var pixels = imageData.data;\n        \n            var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum,\n                r_out_sum, g_out_sum, b_out_sum,\n                r_in_sum, g_in_sum, b_in_sum,\n                pr, pg, pb, rbs;\n        \n            var div = radius + radius + 1;\n            var w4 = width << 2;\n            var widthMinus1 = width - 1;\n            var heightMinus1 = height - 1;\n            var radiusPlus1 = radius + 1;\n            var sumFactor = radiusPlus1 * (radiusPlus1 + 1) \/ 2;\n        \n            var stackStart = new BlurStack();\n            var stack = stackStart;\n            for (i = 1; i < div; i++) {\n                stack = stack.next = new BlurStack();\n                if (i == radiusPlus1) var stackEnd = stack;\n            }\n            stack.next = stackStart;\n            var stackIn = null;\n            var stackOut = null;\n        \n            yw = yi = 0;\n        \n            var mul_sum = mul_table[radius];\n            var shg_sum = shg_table[radius];\n        \n            for (y = 0; y < height; y++) {\n                r_in_sum = g_in_sum = b_in_sum = r_sum = g_sum = b_sum = 0;\n        \n                r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n                g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n                b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n        \n                r_sum += sumFactor * pr;\n                g_sum += sumFactor * pg;\n                b_sum += sumFactor * pb;\n        \n                stack = stackStart;\n        \n                for (i = 0; i < radiusPlus1; i++) {\n                    stack.r = pr;\n                    stack.g = pg;\n                    stack.b = pb;\n                    stack = stack.next;\n                }\n        \n                for (i = 1; i < radiusPlus1; i++) {\n                    p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n                    r_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);\n                    g_sum += (stack.g = (pg = pixels[p + 1])) * rbs;\n                    b_sum += (stack.b = (pb = pixels[p + 2])) * rbs;\n        \n                    r_in_sum += pr;\n                    g_in_sum += pg;\n                    b_in_sum += pb;\n        \n                    stack = stack.next;\n                }\n        \n        \n                stackIn = stackStart;\n                stackOut = stackEnd;\n                for (x = 0; x < width; x++) {\n                    pixels[yi] = (r_sum * mul_sum) >> shg_sum;\n                    pixels[yi + 1] = (g_sum * mul_sum) >> shg_sum;\n                    pixels[yi + 2] = (b_sum * mul_sum) >> shg_sum;\n        \n                    r_sum -= r_out_sum;\n                    g_sum -= g_out_sum;\n                    b_sum -= b_out_sum;\n        \n                    r_out_sum -= stackIn.r;\n                    g_out_sum -= stackIn.g;\n                    b_out_sum -= stackIn.b;\n        \n                    p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n        \n                    r_in_sum += (stackIn.r = pixels[p]);\n                    g_in_sum += (stackIn.g = pixels[p + 1]);\n                    b_in_sum += (stackIn.b = pixels[p + 2]);\n        \n                    r_sum += r_in_sum;\n                    g_sum += g_in_sum;\n                    b_sum += b_in_sum;\n        \n                    stackIn = stackIn.next;\n        \n                    r_out_sum += (pr = stackOut.r);\n                    g_out_sum += (pg = stackOut.g);\n                    b_out_sum += (pb = stackOut.b);\n        \n                    r_in_sum -= pr;\n                    g_in_sum -= pg;\n                    b_in_sum -= pb;\n        \n                    stackOut = stackOut.next;\n                    yi += 4;\n                }\n                yw += width;\n            }\n        \n            for (x = 0; x < width; x++) {\n                g_in_sum = b_in_sum = r_in_sum = g_sum = b_sum = r_sum = 0;\n        \n                yi = x << 2;\n                r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n                g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n                b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n        \n                r_sum += sumFactor * pr;\n                g_sum += sumFactor * pg;\n                b_sum += sumFactor * pb;\n        \n                stack = stackStart;\n        \n                for (i = 0; i < radiusPlus1; i++) {\n                    stack.r = pr;\n                    stack.g = pg;\n                    stack.b = pb;\n                    stack = stack.next;\n                }\n        \n                yp = width;\n        \n                for (i = 1; i <= radius; i++) {\n                    yi = (yp + x) << 2;\n        \n                    r_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);\n                    g_sum += (stack.g = (pg = pixels[yi + 1])) * rbs;\n                    b_sum += (stack.b = (pb = pixels[yi + 2])) * rbs;\n        \n                    r_in_sum += pr;\n                    g_in_sum += pg;\n                    b_in_sum += pb;\n        \n                    stack = stack.next;\n        \n                    if (i < heightMinus1) {\n                        yp += width;\n                    }\n                }\n        \n                yi = x;\n                stackIn = stackStart;\n                stackOut = stackEnd;\n                for (y = 0; y < height; y++) {\n                    p = yi << 2;\n                    pixels[p] = (r_sum * mul_sum) >> shg_sum;\n                    pixels[p + 1] = (g_sum * mul_sum) >> shg_sum;\n                    pixels[p + 2] = (b_sum * mul_sum) >> shg_sum;\n        \n                    r_sum -= r_out_sum;\n                    g_sum -= g_out_sum;\n                    b_sum -= b_out_sum;\n        \n                    r_out_sum -= stackIn.r;\n                    g_out_sum -= stackIn.g;\n                    b_out_sum -= stackIn.b;\n        \n                    p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;\n        \n                    r_sum += (r_in_sum += (stackIn.r = pixels[p]));\n                    g_sum += (g_in_sum += (stackIn.g = pixels[p + 1]));\n                    b_sum += (b_in_sum += (stackIn.b = pixels[p + 2]));\n        \n                    stackIn = stackIn.next;\n        \n                    r_out_sum += (pr = stackOut.r);\n                    g_out_sum += (pg = stackOut.g);\n                    b_out_sum += (pb = stackOut.b);\n        \n                    r_in_sum -= pr;\n                    g_in_sum -= pg;\n                    b_in_sum -= pb;\n        \n                    stackOut = stackOut.next;\n        \n                    yi += width;\n                }\n            }\n        \n            context.putImageData(imageData, top_x, top_y);\n        \n        }\n        function BlurStack() {\n            this.r = 0;\n            this.g = 0;\n            this.b = 0;\n            this.a = 0;\n            this.next = null;\n        }\n        \n        \/\/ https:\/\/gist.github.com\/mjackson\/5311256\n        function rgbToHsl(r, g, b) {\n            r \/= 255, g \/= 255, b \/= 255;\n            var max = Math.max(r, g, b), min = Math.min(r, g, b);\n            var h, s, l = (max + min) \/ 2;\n            if (max == min) {\n                h = s = 0; \/\/ achromatic\n            } else {\n                var d = max - min;\n                s = l > 0.5 ? d \/ (2 - max - min) : d \/ (max + min);\n                switch (max) {\n                    case r: h = (g - b) \/ d + (g < b ? 6 : 0); break;\n                    case g: h = (b - r) \/ d + 2; break;\n                    case b: h = (r - g) \/ d + 4; break;\n                }\n                h \/= 6;\n            }\n            return [h, s, l];\n        }\n        function hslToRgb(h, s, l) {\n            var r, g, b;\n            if (s == 0) {\n                r = g = b = l; \/\/ achromatic\n            } else {\n                var hue2rgb = function hue2rgb(p, q, t) {\n                    if (t < 0) t += 1;\n                    if (t > 1) t -= 1;\n                    if (t < 1 \/ 6) return p + (q - p) * 6 * t;\n                    if (t < 1 \/ 2) return q;\n                    if (t < 2 \/ 3) return p + (q - p) * (2 \/ 3 - t) * 6;\n                    return p;\n                }\n                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                var p = 2 * l - q;\n                r = hue2rgb(p, q, h + 1 \/ 3);\n                g = hue2rgb(p, q, h);\n                b = hue2rgb(p, q, h - 1 \/ 3);\n            }\n            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n        }\n        \n        function lightBlur(hsl) {\n        \n            \/\/ Adjust the luminance.\n            let lumCalc = 0.35 + (0.3 \/ hsl[2]);\n            if (lumCalc < 1) { lumCalc = 1; }\n            else if (lumCalc > 3.3) { lumCalc = 3.3; }\n            const l = hsl[2] * lumCalc;\n        \n            \/\/ Adjust the saturation. \n            const colorful = 2 * hsl[1] * l;\n            const s = hsl[1] * colorful * 1.5;\n        \n            return [hsl[0], s, l];\n        \n        }\n        \n        function darkBlur(hsl) {\n            \/\/ Adjust the saturation. \n            const colorful = 2 * hsl[1] * hsl[2];\n            const s = hsl[1] * (1 - hsl[2]) * 3;\n        \n            return [hsl[0], s, hsl[2]];\n        \n        }\n        \/\/ Set up the canvas.\n        const img = document.getElementById(\"blurImg\");\n        const canvas = document.getElementById(\"mainCanvas\");\n        const w = img.naturalWidth;\n        const h = img.naturalHeight;\n        canvas.style.width = w + \"px\";\n        canvas.style.height = h + \"px\";\n        canvas.width = w;\n        canvas.height = h;\n        const context = canvas.getContext(\"2d\");\n        context.clearRect(0, 0, w, h);\n        context.drawImage(img, 0, 0);\n        \n        \/\/ Get the image data from the context.\n        var imageData = context.getImageData(0, 0, w, h);\n        var pix = imageData.data;\n        \n        \/\/ Set the image function, if any.\n        var imageFunc;\n        var style = \"${style}\";\n        if (style == \"dark\") { imageFunc = darkBlur; }\n        else if (style == \"light\") { imageFunc = lightBlur; }\n        for (let i = 0; i < pix.length; i += 4) {\n            \/\/ Convert to HSL.\n            let hsl = rgbToHsl(pix[i], pix[i + 1], pix[i + 2]);\n        \n            \/\/ Apply the image function if it exists.\n            if (imageFunc) { hsl = imageFunc(hsl); }\n        \n            \/\/ Convert back to RGB.\n            const rgb = hslToRgb(hsl[0], hsl[1], hsl[2]);\n        \n            \/\/ Put the values back into the data.\n            pix[i] = rgb[0];\n            pix[i + 1] = rgb[1];\n            pix[i + 2] = rgb[2];\n        }\n        \/\/ Draw over the old image.\n        context.putImageData(imageData, 0, 0);\n        \/\/ Blur the image.\n        stackBlurCanvasRGB(\"mainCanvas\", 0, 0, w, h, ${ blur });\n        \n        \/\/ Perform the additional processing for dark images.\n        if (style == \"dark\") {\n        \n            \/\/ Draw the hard light box over it.\n            context.globalCompositeOperation = \"hard-light\";\n            context.fillStyle = \"rgba(55,55,55,0.2)\";\n            context.fillRect(0, 0, w, h);\n            \/\/ Draw the soft light box over it.\n            context.globalCompositeOperation = \"soft-light\";\n            context.fillStyle = \"rgba(55,55,55,1)\";\n            context.fillRect(0, 0, w, h);\n            \/\/ Draw the regular box over it.\n            context.globalCompositeOperation = \"source-over\";\n            context.fillStyle = \"rgba(55,55,55,0.4)\";\n            context.fillRect(0, 0, w, h);\n        \n            \/\/ Otherwise process light images.\n        } else if (style == \"light\") {\n            context.fillStyle = \"rgba(255,255,255,0.4)\";\n            context.fillRect(0, 0, w, h);\n        }\n        \/\/ Return a base64 representation.\n        canvas.toDataURL();    \n        `\n\n        \/\/ Convert the images and create the HTML.\n        let blurImgData = Data.fromPNG(img).toBase64String()\n        let html = `\n            <img id=\"blurImg\" src=\"data:image\/png;base64,${blurImgData}\" \/>\n            <canvas id=\"mainCanvas\" \/>\n        `\n\n        \/\/ Make the web view and get its return value.\n        let view = new WebView()\n        await view.loadHTML(html)\n        let returnValue = await view.evaluateJavaScript(js)\n\n        \/\/ Remove the data type from the string and convert to data.\n        let imageDataString = returnValue.slice(22)\n        let imageData = Data.fromBase64String(imageDataString)\n\n        \/\/ Convert to image and crop before returning.\n        let imageFromData = Image.fromData(imageData)\n        if (crop != null && crop != undefined) {\n            return this.cropImage(crop, imageFromData)\n        } else {\n            return imageFromData\n        }\n    }\n\n    \/**\n    * 手机各大小组件尺寸\n    *\/\n    phoneSizes() {\n        let phones = {\n\n            \/\/ 12 Pro Max\n            \"2778\": {\n                小号: 510,\n                中号: 1092,\n                大号: 1146,\n                左边: 96,\n                右边: 678,\n                顶部: 246,\n                中间: 882,\n                底部: 1518\n            },\n\n            \/\/ 12 and 12 Pro\n            \"2532\": {\n                小号: 474,\n                中号: 1014,\n                大号: 1062,\n                左边: 78,\n                右边: 618,\n                顶部: 231,\n                中间: 819,\n                底部: 1407\n            },\n\n            \/\/ 11 Pro Max, XS Max\n            \"2688\": {\n                小号: 507,\n                中号: 1080,\n                大号: 1137,\n                左边: 81,\n                右边: 654,\n                顶部: 228,\n                中间: 858,\n                底部: 1488\n            },\n\n            \/\/ 11, XR\n            \"1792\": {\n                小号: 338,\n                中号: 720,\n                大号: 758,\n                左边: 54,\n                右边: 436,\n                顶部: 160,\n                中间: 580,\n                底部: 1000\n            },\n\n\n            \/\/ 11 Pro, XS, X, 12 mini\n            \"2436\": {\n                x: {\n                    小号: 465,\n                    中号: 987,\n                    大号: 1035,\n                    左边: 69,\n                    右边: 591,\n                    顶部: 213,\n                    中间: 783,\n                    底部: 1353,\n                },\n\n                mini: {\n                    小号: 465,\n                    中号: 987,\n                    大号: 1035,\n                    左边: 69,\n                    右边: 591,\n                    顶部: 231,\n                    中间: 801,\n                    底部: 1371,\n                }\n\n            },\n\n            \/\/ Plus phones\n            \"2208\": {\n                小号: 471,\n                中号: 1044,\n                大号: 1071,\n                左边: 99,\n                右边: 672,\n                顶部: 114,\n                中间: 696,\n                底部: 1278\n            },\n\n            \/\/ SE2 and 6\/6S\/7\/8\n            \"1334\": {\n                小号: 296,\n                中号: 642,\n                大号: 648,\n                左边: 54,\n                右边: 400,\n                顶部: 60,\n                中间: 412,\n                底部: 764\n            },\n\n            \/\/ SE1\n            \"1136\": {\n                小号: 282,\n                中号: 584,\n                大号: 622,\n                左边: 30,\n                右边: 332,\n                顶部: 59,\n                中间: 399,\n                底部: 399\n            },\n\n            \/\/ 11 and XR in Display Zoom mode\n            \"1624\": {\n                小号: 310,\n                中号: 658,\n                大号: 690,\n                左边: 46,\n                右边: 394,\n                顶部: 142,\n                中间: 522,\n                底部: 902\n            },\n\n            \/\/ Plus in Display Zoom mode\n            \"2001\": {\n                小号: 444,\n                中号: 963,\n                大号: 972,\n                左边: 81,\n                右边: 600,\n                顶部: 90,\n                中间: 618,\n                底部: 1146\n            },\n        }\n        return phones\n    }\n\n    \/**\n    * ------------------------------------------------------------------------------\n    *\/\n\n\n    \/**\n    * 运行小组件\n    * @param {ListWidget} widget 小组件\n    * @param {bool} needSetBg 是否需要设置背景\n    *\/\n    async runWidget(widget, needSetBg = true) {\n        \/\/ 设置边距(上，左，下，右)\n        widget.setPadding(this.padding.top, this.padding.left, this.padding.bottom, this.padding.right)\n        \/\/ 设置刷新间隔\n        widget.refreshAfterDate = new Date(this.refreshInterval * 60 * 1000)\n\n        if (needSetBg) {\n            \/\/ 需要选择图片\n            if (this.picBgMode) {\n                await this.transparentBg()\n            }\n\n            \/\/ 设置图片背景\n            if (!this.colorBgMode) {\n                const bgImg = this.loadImgCache(this.scriptName)\n                if (bgImg != undefined && bgImg != null) {\n                    widget.backgroundImage = bgImg\n                }\n            } else {\n                \/\/ 设置纯色背景 \n                widget.backgroundColor = this.bgColor\n            }\n        }\n\n        \/\/ 设置组件\n        Script.setWidget(widget)\n        if (this.previewSizeMode >= 0) {\n            \/\/ 预览\n            if (config.runsInApp) {\n                if (this.previewSizeMode == 1) {\n                    widget.presentMedium()\n                } else if (this.previewSizeMode == 2) {\n                    widget.presentLarge()\n                } else {\n                    widget.presentSmall()\n                }\n            }\n        }\n        \/\/ 完成脚本\n        Script.complete()\n    }\n\n}\n\n\/\/================================\n\/**\n* 自定义字体渲染\n*\/\nclass CustomFont {\n    constructor(webview, config) {\n        this.webview = webview || new WebView()\n        this.fontFamily = config.fontFamily || 'customFont'\n        this.fontUrl = 'url(' + config.fontUrl + ')'\n        this.timeout = config.timeout || 60000\n    }\n\n    async load() { \/\/ 加载字体\n        return await this.webview.evaluateJavaScript(`\n            const customFont = new FontFace(\"${this.fontFamily}\", \"${this.fontUrl}\");\n            const canvas = document.createElement(\"canvas\");\n            const ctx = canvas.getContext(\"2d\");\n            let baseHeight,extendHeight;\n            console.log('loading font.');\n            customFont.load().then((font) => {\n            document.fonts.add(font);\n            console.log('load font successfully.');\n            completion(true);\n            });\n            setTimeout(()=>{\n            console.log('load font failed：timeout.');\n            completion(false);\n            },${this.timeout});\n            null`\n        )\n    }\n\n    async drawText(text, config) {\n        \/\/ 配置\n        const fontSize = config.fontSize || 20\n        const textWidth = config.textWidth || 300\n        const align = config.align || 'left' \/\/ left、right、center\n        const lineLimit = config.lineLimit || 99\n        const rowSpacing = config.rowSpacing || 0\n        const textColor = config.textColor || 'white'\n        \n        const textArray = await this.cutText(text, fontSize, textWidth)\n        const scale = config.scale || 1\n        \n        let script = ''\n        for (let i in textArray) {\n            let content = textArray[i].str\n            let length = textArray[i].len\n\n            if (i >= lineLimit) break\n            if (i == lineLimit - 1 && i < textArray.length - 1)\n                content = content.replace(\/(.{1})$\/, '…')\n\n            let x = 0, y = Number(i) * fontSize\n            if (rowSpacing > 0 && i > 0) y = y + rowSpacing\n            if (i > 0) {\n                if (align === 'right') {\n                    x = textWidth - length\n                } else if (align === 'center') {\n                    x = (textWidth - length) \/ 2\n                }\n            }\n            script = script + `ctx.fillText(\"${content}\", ${x}, ${y});`\n        }\n\n        const realWidth = textArray.length > 1 ? textWidth : textArray[0].len\n        const lineCount = lineLimit < textArray.length ? lineLimit : textArray.length\n        const returnValue = await this.webview.evaluateJavaScript(`\n            canvas.width=${realWidth}*${scale};\n            ctx.font = \"${fontSize}px ${this.fontFamily}\";\n            ctx.textBaseline= \"hanging\";\n            baseHeight= ${(fontSize + rowSpacing) * (lineCount - 1)};\n            extendHeight= ctx.measureText('qypgj').actualBoundingBoxDescent;\n            canvas.height= (baseHeight + extendHeight)*${scale};\n            ctx.scale(${scale}, ${scale});\n\n            ctx.font = \"${fontSize}px ${this.fontFamily}\";\n            ctx.fillStyle = \"${textColor}\";\n            ctx.textBaseline= \"hanging\";\n            ${script}\n            canvas.toDataURL()`\n        )\n\n        const imageDataString = returnValue.slice(22)\n        const imageData = Data.fromBase64String(imageDataString)\n        return Image.fromData(imageData)\n    }\n\n    async cutText(text, fontSize, textWidth) { \/\/ 处理文本\n        return await this.webview.evaluateJavaScript(`\n            function cutText(textWidth, text) {\n                ctx.font = \"${fontSize}px ${this.fontFamily}\";\n                ctx.textBaseline = \"hanging\";\n            \n                let textArray = [];\n                let len = 0, str = '';\n                for (let i = 0; i < text.length; i++) {\n                    const char = text[i]\n                    const width = ctx.measureText(char).width;\n                    if (len < textWidth) {\n                        str = str + char;\n                        len = len + width;\n                    }\n                    if (len == textWidth) {\n                        textArray.push({ str: str, len: len, });\n                        str = ''; len = 0;\n                    }\n                    if (len > textWidth) {\n                        textArray.push({\n                            str: str.substring(0, str.length - 1),\n                            len: len - width,\n                        });\n                        str = char; len = width;\n                    }\n                    if (i == text.length - 1 && str) {\n                        textArray.push({ str: str, len: len, });\n                    }\n                }\n                return textArray\n            }\n            cutText(${ textWidth }, \"${text}\")\n        `)\n    }\n}\n\n\/\/================================\nconst Running = async (Widget, scriptName, needSetBg = true) => {\n    const M = new Widget(scriptName)\n    const W = await M.render()\n    if (W != undefined) {\n        await M.runWidget(W, needSetBg)\n    }\n}\n\/\/================================\n\n\/\/================================\nmodule.exports = {\n    Base,\n    Running,\n}\n\/\/================================",
  "share_sheet_inputs" : [

  ]
}